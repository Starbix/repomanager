#!/usr/bin/env bash
# Repomanager update script
# It downloads last available tar.gz archive, uncompress it and copy files and directories to the right place.
set -u


## Variables ##
CURRENT="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
WWW_DIR=$(echo "$CURRENT" | sed 's|/tools||g')
LOG_DIR="$WWW_DIR/logs/update"
LOG="$LOG_DIR/update.log"
DB="$WWW_DIR/db/repomanager.db"
DB_STATS="$WWW_DIR/db/repomanager-stats.db"
DB_HOSTS="$WWW_DIR/db/repomanager-hosts.db"
UPDATE_ERROR=0

# Create empty log file
mkdir -p "$LOG_DIR"
echo -n> "$LOG"

# Write everything to log
exec &> >(tee -a "$LOG")

# Quit if github version is unknown or if file does not exist
if [ ! -f "${WWW_DIR}/version.available" ];then
    echo "Error: version.available file not found."
    exit 1
fi

GITHUB_VERSION=$(cat ${WWW_DIR}/version.available)
if [ -z "$GITHUB_VERSION" ];then
    echo "Error: unknown github available version number."
    exit 1
fi

WORKING_DIR="/tmp/repomanager-update_${GITHUB_VERSION}"
BACKUP_CONF_DIR="$WORKING_DIR/backup-conf"
SQL_QUERY_DIR="$WORKING_DIR/repomanager/tools/update-sql-queries/stable"

## Functions ##

# Execute SQL queries to update certain tables in the database
function updateDatabase
{
    echo ""

    # Quit if main database does not exist
    if [ ! -f "$DB" ];then
        exit 5
    fi

    # Quit if sqlite3 is not found
    if [ ! -f "/usr/bin/sqlite3" ];then
        exit 6
    fi

    # Apply SQL update queries if dir exists and if there are files in it
    if [ -d "$SQL_QUERY_DIR" ];then
        if [ "$(ls -A $SQL_QUERY_DIR)" ];then

            for SQL_QUERY_FILE in $(ls -A1 $SQL_QUERY_DIR/);do
                bash "$SQL_QUERY_DIR/$SQL_QUERY_FILE" "$DB" "$DB_STATS" "$DB_HOSTS"

                if [ $? -ne "0" ];then
                    echo "Error while executing SQL update request from the update file: $SQL_QUERY_FILE."
                    exit 7
                fi

            done
        fi


    fi
}


## Execution ##

# Delete working dir if already exist.
rm "$WORKING_DIR" -rf

# Then create it.
mkdir -p "$WORKING_DIR"

# Dir which will contain backups of actual configuration files
mkdir -p "$BACKUP_CONF_DIR" &&

cd "$WORKING_DIR"

# Backup actual configurations
cp ${WWW_DIR}/configurations/repomanager.conf ${BACKUP_CONF_DIR}/
cp ${WWW_DIR}/db/repomanager.db ${BACKUP_CONF_DIR}/
cp ${WWW_DIR}/db/repomanager-stats.db ${BACKUP_CONF_DIR}/
cp -r ${WWW_DIR}/logs ${BACKUP_CONF_DIR}/
cp -r ${WWW_DIR}/operations/pid ${BACKUP_CONF_DIR}/
cp -r ${WWW_DIR}/.temp ${BACKUP_CONF_DIR}/

# Download new version archive
wget --no-cache -q "https://github.com/lbr38/repomanager/releases/download/${GITHUB_VERSION}/repomanager_${GITHUB_VERSION}.tar.gz"
if [ $? -ne "0" ];then
    exit 2
fi

# Extract archive
tar xzf repomanager_${GITHUB_VERSION}.tar.gz
if [ $? -ne "0" ];then
    exit 3
fi

# Enter into decompressed archive dir
cd "$WORKING_DIR/repomanager"

# Create target dirs if not exist
mkdir -p "${WWW_DIR}/public"
mkdir -p "${WWW_DIR}/resources"
mkdir -p "${WWW_DIR}/tools"
mkdir -p "${WWW_DIR}/templates"
mkdir -p "${WWW_DIR}/api"
mkdir -p "${WWW_DIR}/db"

# Apply database update queries if there are
updateDatabase

# Copy files to the right place

# Copy all files
rsync -a --quiet ./ ${WWW_DIR}/
if [ $? -ne "0" ];then
    (( UPDATE_ERROR++ ))
fi
# Then copy .php files only and delete those which are not used anymore
rsync -a --quiet --delete-after --include '*/' --include '*.php' --exclude '*' ./ ${WWW_DIR}/
if [ $? -ne "0" ];then
    (( UPDATE_ERROR++ ))
fi

# Restore backuped configuration files
\cp ${BACKUP_CONF_DIR}/repomanager.conf ${WWW_DIR}/configurations/repomanager.conf &&
\cp ${BACKUP_CONF_DIR}/repomanager.db ${WWW_DIR}/db/repomanager.db &&
\cp ${BACKUP_CONF_DIR}/repomanager-stats.db ${WWW_DIR}/db/repomanager-stats.db &&
\cp -r ${BACKUP_CONF_DIR}/logs ${WWW_DIR}/ &&
\cp -r ${BACKUP_CONF_DIR}/pid ${WWW_DIR}/operations/ &&
\cp -r ${BACKUP_CONF_DIR}/.temp ${WWW_DIR}/ &&
if [ $? -ne "0" ];then
    (( UPDATE_ERROR++ ))
fi

# Quit if there was any error
if [ $UPDATE_ERROR -ne "0" ];then
    exit 4
fi

# Apply permissions on repomanager service script
chmod 550 ${WWW_DIR}/tools/services/repomanager-service
 
# Clean up
cd "$WWW_DIR"

# Clean up unused files or directories
rm -rf "${WWW_DIR}/archives"
rm -rf "${WWW_DIR}/_archives"
rm -rf "${WWW_DIR}/cron"
rm -rf "${WWW_DIR}/public/ressources"
rm -rf "${WWW_DIR}/logs/plans"
rm -f "${WWW_DIR}/operations/cronjob_daily.php"

# Delete working dir
rm "$WORKING_DIR" -rf

exit 0